use serde::{Deserialize, Serialize};

use crate::lib::{String, Vec};

#[derive(Serialize, Deserialize, Debug)]
pub struct NegotiationRequest {
    pub version: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub enum NegotiationHash {
    SHA256,
    SHA512,
}

#[derive(Serialize, Deserialize, Debug)]
pub enum NegotiationKey {
    RSA2048,
    RSA3072,
    RSA4096,
    ECP256,
    ECP384,
    ECP521,
}

#[derive(Serialize, Deserialize, Debug)]
pub enum NegotiationParam {
    /// Asymmetric key type to be generated by SVSM to receive the secret
    Key(NegotiationKey),
    /// Extra parameters of the attestation protocol (e.g., a nonce) to be
    /// included in the hash
    Extra(String),
}

#[derive(Serialize, Deserialize, Debug)]
pub struct NegotiationResponse {
    /// Hash function that SVSM must use to shuffle all other parameters
    /// which must be signed by the attestation report (e.g. SEV-SNP user_data)
    pub hash: NegotiationHash,
    /// Parameters to be hashed in the specific order defined by the array
    pub params: Vec<NegotiationParam>,
}

// Based on JSON Web Key
// See for examples: https://www.rfc-editor.org/rfc/rfc7517#appendix-A.1
#[derive(Serialize, Deserialize, Debug)]
pub enum AttestationKey {
    RSA { n: String, e: String },
    EC { crv: String, x: String, y: String },
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationRequest {
    /// Attestation report generated by SVSM
    pub evidence: String,
    /// Key generated by SVSM to receive the secret
    pub key: Option<AttestationKey>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationResponse {
    /// Remote attestation result
    pub success: bool,
    /// Secret encrypted with the key generated by SVSM
    pub secret: Option<String>,
}
